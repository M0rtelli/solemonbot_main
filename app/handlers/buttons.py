from aiogram import F, Router
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

import markup as markup
import app.classes as classes
import app.base as base
import app.functions as function
import texts as texts

router = Router()


@router.message(F.text.lower() == "—Ç–æ–ø üîù")
async def button_top(message: types.Message):
    if message.from_user.id == message.chat.id:
        await function.check_change_username(message)
        counter = 0
        text = texts.top
        for row in base.cursor.execute("SELECT username, position_month, userid FROM users ORDER BY position_month DESC LIMIT 5"):
            counter += 1 
            for i in row[0]:
                if i == "@":
                    text += f"‚Ññ{counter} | {row[0]} - <code>{row[1]} –ø–æ–∑–∏—Ü–∏–π üôâ</code>\n"
                    break
            else: 
                text += f'‚Ññ{counter} | username –Ω–µ —É–∫–∞–∑–∞–Ω (userid: <a href="tg://user?id={row[2]}">{row[2]}</a>) - {row[1]} –ø–æ–∑–∏—Ü–∏–π üôâ\n'
        await message.answer(text = text, parse_mode="html")

@router.message(F.text.lower() == "–º–æ—è —Å–∫–∏–¥–æ—á–∫–∞ üí∏")
async def button_top(message: types.Message):
    if message.from_user.id == message.chat.id:
        await function.check_change_username(message)

        discount = base.cursor.execute(f"SELECT discount FROM users WHERE userid = '{message.from_user.id}' LIMIT 1").fetchone()[0]
        position = base.cursor.execute(f"SELECT position_all FROM users WHERE userid = '{message.from_user.id}' LIMIT 1").fetchone()[0]
        temp_discount = base.cursor.execute(f"SELECT temp_discount FROM users WHERE userid = \'{message.from_user.id}\' LIMIT 1").fetchone()[0]
        top_discount = base.cursor.execute(f"SELECT top_discount FROM users WHERE userid = \'{message.from_user.id}\' LIMIT 1").fetchone()[0]
        
        await message.answer(text = f"üí∞ - –í–∞—à–∞ —Å–∫–∏–¥–∫–∞ *{discount}%*\n\
ü§ò - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ª–ø–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π - *{position} —à—Ç.*\n\n\
{f'–£ –í–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ {top_discount}% –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü (–Ω–µ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–∏–¥–∫–æ–π)!' if int(top_discount) > 0 else ''}\n\n\
{f'–£ –í–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ {temp_discount}%!' if int(temp_discount) > 0 else ''}", parse_mode="Markdown")

@router.message(F.text.lower() == "–ø—Ä–∞–≤–∏–ª–∞")
async def button_top(message: types.Message):
    if message.from_user.id == message.chat.id:
        await function.check_change_username(message)

        photo = types.FSInputFile("src/img/rules_photo.jpg")
        await message.answer_photo(photo = photo, caption = texts.rules_discount, parse_mode="html", reply_markup = markup.backToMainMenu)

@router.message(F.text.lower() == "support/help")
async def button_top(message: types.Message):
    if message.from_user.id == message.chat.id:
        await function.check_change_username(message)

        photo = types.FSInputFile("src/img/support_photo.jpg")
        await message.answer_photo(photo = photo, caption = texts.support, parse_mode="html", reply_markup = markup.backToMainMenu)

@router.message(F.text.lower() == "–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def button_top(message: types.Message):
    if message.from_user.id == message.chat.id:
        await function.check_change_username(message)

        await message.answer(text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup = markup.mainMenu)

@router.message(F.text.lower() == "–æ –Ω–∞—Å")
async def button_top(message: types.Message):
    if message.from_user.id == message.chat.id:
        await function.check_change_username(message)
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(
            text="–ë–∞—Ä–∞—Ö–æ–ª–∫–∞", url="tg://resolve?domain=BobruiskVape")
        )
        builder.row(types.InlineKeyboardButton(
            text="Solemon",
            url="https://t.me/+Y9vf31LCNRc2NTYy")
        )
        builder.row(types.InlineKeyboardButton(
            text="Pepsi",
            url="tg://resolve?domain=PepsiColaVape")
        )
        await message.answer(text = "<b>–ù–∞—à–∏ —Å—Å—ã–ª–∫–∏:</b>", reply_markup = builder.as_markup(), parse_mode = "html")

@router.message(F.text.lower() == "—Å–∫—É–ø–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ üõç")
async def button_top(message: types.Message, state: FSMContext):
    if message.from_user.id == message.chat.id:
        await function.check_change_username(message)
        await state.set_state(classes.sellPod.namePod)
        await message.answer(text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n\n–ü—Ä–∏–º–µ—Ä: <code>Smoant Pasito 2</code>", parse_mode = "html", reply_markup = types.ReplyKeyboardMarkup(
                    keyboard=[
                        [
                            types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")
                        ]
                    ],
                    resize_keyboard=True,
                ),
            )
    
@router.message(F.text.lower() == "–±–∞—Ä–∞—Ö–æ–ª–∫–∞")
async def button_top(message: types.Message, state: FSMContext):
    if message.from_user.id == message.chat.id:
        await function.check_change_username(message)
        await state.set_state(classes.toMarketPlace.chooseMenu)
        await message.answer(text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ", parse_mode = "html", reply_markup = types.ReplyKeyboardMarkup(
                    keyboard=[
                        [
                            types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
                            types.KeyboardButton(text="–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"),
                            types.KeyboardButton(text="–ù–∞–∑–∞–¥")
                        ]
                    ],
                    resize_keyboard=True,
                ),
            )

        
@router.message(F.text.lower() == "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
async def button_top(message: types.Message, state: FSMContext):
    if message.from_user.id == message.chat.id:
        await function.check_change_username(message)
        await message.answer(text = await function.get_referal_text(message), parse_mode = "html", reply_markup = types.ReplyKeyboardMarkup(
                    keyboard=[
                        [
                            types.KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
                        ]
                    ],
                    resize_keyboard=True,
                ),
            )

    # ----- ADMIN BUTTONS ---------

@router.message(F.text.lower() == "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ")
async def button_top(message: types.Message, state: FSMContext):
    if await function.check_admin(message.from_user.id):
        await state.set_state(classes.selectUser.userId)
        await message.answer(text = "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ userid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä: <code>@solemxn</code>", parse_mode = "html", reply_markup = types.ReplyKeyboardMarkup(
                keyboard=[
                    [
                        types.KeyboardButton(text="/–æ—Ç–º–µ–Ω–∞")
                    ]
                ],
                resize_keyboard=True,
            ),
        )

@router.message(F.text.lower() == "–≤—ã–¥–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É")
async def button_top(message: types.Message, state: FSMContext):
    if await function.check_admin(message.from_user.id):
        await state.set_state(classes.giveSell.userId)
        await message.answer(text = "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ userid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä: <code>@solemxn</code>", parse_mode = "html", reply_markup = types.ReplyKeyboardMarkup(
                keyboard=[
                    [
                        types.KeyboardButton(text="/–æ—Ç–º–µ–Ω–∞")
                    ]
                ],
                resize_keyboard=True,
            ),
        )

@router.message(F.text.lower() == "–≤—ã–¥–∞—Ç—å —Å–∫–∏–¥–∫—É")
async def button_top(message: types.Message, state: FSMContext):
    if await function.check_admin(message.from_user.id):
        await state.set_state(classes.giveDiscount.userId)
        await message.answer(text = "–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ userid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–∏–º–µ—Ä: <code>@solemxn</code>", parse_mode = "html",reply_markup = types.ReplyKeyboardMarkup(
                keyboard=[
                    [
                        types.KeyboardButton(text="/–æ—Ç–º–µ–Ω–∞")
                    ]
                ],
                resize_keyboard=True,
            ),
        )

@router.message(F.text.lower() == "–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def button_top(message: types.Message, state: FSMContext):
    if await function.check_admin(message.from_user.id):
        # TODO
        allUsers = base.cursor.execute("SELECT id FROM users ORDER BY id DESC LIMIT 1;").fetchone()[0]

        allPosition = 0
        for row in base.cursor.execute("SELECT position_all FROM users ORDER BY position_all DESC"):
            allPosition += row[0]
            if row[0] == 0:
                break

        monthPosition = 0
        for row in base.cursor.execute("SELECT position_month FROM users ORDER BY position_month DESC"):
            monthPosition += row[0]
            if row[0] == 0:
                break

        await message.answer(text = f"<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n\
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–æ–≤: <code>{allUsers}</code>\n\
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ (–≤—Å–µ–≥–æ): <code>{allPosition}</code>\n\
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂ (–∑–∞ –º–µ—Å—è—Ü): <code>{monthPosition}</code>\n\
\n\
–ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏: <code>–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</code>\
"
, parse_mode = "html")
