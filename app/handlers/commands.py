from aiogram import Router
from aiogram import types
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

import time
import logging
import asyncio

import markup as markup
import app.classes as classes
import app.base as base
import app.functions as function
import app.localdata.load as localdata

router = Router()

@router.message(Command('menu'))
async def cmd_help(message: Message):
    await message.answer(text = "–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup = markup.mainMenu)

@router.message(CommandStart())
async def handle_start(message: Message):
    if message.from_user.id == message.chat.id:
        photo = types.FSInputFile("src/img/start_photo.jpg")
        text = "<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤–µ–π–ø–µ—Ä! –Ø –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –°–æ–ª–µ–º–æ–Ω–∞.</b>\n\n\
    –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–æ—á–∫–∏\n\n\
    –ê —Ç–∞–∫ –∂–µ <b>–¢–û–ü</b> –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü. –î–ª—è –Ω–∏—Ö –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ <b>—Ä–æ–∑—ã–≥—Ä—ã—à–∏</b>.\n\n\
    <b>–ü—Ä–∞–≤–∏–ª–æ –æ–¥–Ω–æ</b> - –ø–æ–∫—É–ø–∞–π –±–æ–ª—å—à–µ, –ø–æ–ø–∞–¥–∞–π –≤ <b>–¢–û–ü.</b>"
        await message.answer_photo(photo=photo, caption=text, parse_mode="html", reply_markup = markup.mainMenu)

        # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —é–∑–µ—Ä–∞
        if base.cursor.execute(f"SELECT userid FROM users WHERE userid = {message.from_user.id}").fetchone() is None:
            try:
                try:
                    refererr_id = message.text[7:]
                    if refererr_id != message.from_user.id:
                        base.cursor.execute(f"INSERT INTO referals (uid_referal, uid_shared) VALUES (\'{message.from_user.id}\', \'{refererr_id}\')")
                        base.conn.commit()
                        try:
                            await message.bot.send_message(chat_id = refererr_id, parse_mode = "html", text = f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} [ID: <a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>] —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –í–∞—à–µ–π —Å—Å—ã–ª–∫–µ!</b>\n\n\
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏, —Ä–µ—Ñ–µ—Ä–∞–ª –¥–æ–ª–∂–µ–Ω –∫—É–ø–∏—Ç—å —Ö–æ—Ç—è-–±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é.')
                        except:
                            pass
                except Exception as exc:
                    print(exc)

                base.cursor.execute(f'INSERT INTO users (username, userid, discount, position_all, position_month) VALUES (\'@{message.from_user.username}\', \'{message.from_user.id}\', \'0\', \'0\', \'0\')')
            except:
                pass
            base.conn.commit()

            localdata.localUsers.insert(len(localdata.localUsers), {
                  "username":f'@{message.from_user.username}',
                  "userid":f'{message.from_user.id}',
                  "discount":'0',
                  "position_all":'0',
                  "position_month":'0',
                  "temp_discount":'0',
                  "top_discount":'0'
            })
        
        await function.check_change_username(message)
        # await message.answer(text="[BD]: –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.")



@router.message(Command("resettop"))
async def handle_help(message: Message):
    if message.from_user.id == message.chat.id:
        if await function.check_admin(message.from_user.id):
            counter = 0
            
            base.cursor.execute(f"UPDATE users SET top_discount = 0") # –æ–±–Ω—É–ª—è–µ–º top_discount (—Å–∫–∏–¥–∫–∞ –Ω–∞ –º–µ—Å—è—Ü) —É –≤—Å–µ—Ö
            base.conn.commit()

 
            text = f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} [<a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>] —Å–±—Ä–æ—Å–∏–ª <b>–¢–û–ü</b>\n\n<b>–ò—Ç–æ–≥–∏ –º–µ—Å—è—Ü–∞:</b>\n\n'
            sql_data = ''

            for row in base.cursor.execute("SELECT username, position_month, userid FROM users ORDER BY position_month DESC LIMIT 5"): # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–¥–∞—á—É —Å–∫–∏–¥–∫–∏ top_discount (—Å–∫–∏–¥–∫–∞ –Ω–∞ –º–µ—Å—è—Ü)
                counter += 1 
                if '@' in str(row[0]):
                    text += f"‚Ññ{counter} | {row[0]} - <code>{row[1]} –ø–æ–∑–∏—Ü–∏–π üôâ</code>\n"
                else:
                    text += f'‚Ññ{counter} | username –Ω–µ —É–∫–∞–∑–∞–Ω (userid: <a href="tg://user?id={row[2]}">{row[2]}</a>) - {row[1]} –ø–æ–∑–∏—Ü–∏–π üôâ\n'
                
                sql_data += f"UPDATE users SET top_discount = 20 WHERE userid = {row[2]}; \n"


            base.cursor.executescript(sql_data) # –µ–±–∞–Ω—ã–π –∫–æ—Å—Ç—ã–ª—å (–ù–ï –¢–†–û–ì–ê–¢–¨) –≤—ã–¥–∞—á–∞ —Å–∫–∏–¥–∫–∏ top_discount (—Å–∫–∏–¥–∫–∞ –Ω–∞ –º–µ—Å—è—Ü)    
            base.conn.commit()

            base.cursor.execute(f"UPDATE users SET position_month = 0")
            base.conn.commit()
            # await message.bot.send_message(chat_id = -4113748904, text = text, parse_mode = "html")
            await message.answer(text = text, parse_mode = "html")
            await message.answer(text = "–¢–æ–ø —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª—ë–Ω.")

@router.message(Command("delkeyboard"))
async def handle_help(message: Message):
    if await function.check_admin(message.from_user.id):
        await message.answer(text = "keyboard deleted.", parse_mode = "html", reply_markup = types.ReplyKeyboardRemove())

@router.message(Command("sendall"))
async def handle_sendall(message: Message, state: FSMContext):
    if message.chat.id == 692912357 or message.chat.id == 654148701:
        await state.set_state(classes.selectUser.startDB)
        await message.answer(text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
    else:
        await message.answer('Error')

@router.message(Command("test1"))
async def handle_sendall(message: Message, state: FSMContext):
    if message.chat.id == 654148701:
        message.answer("—á—è—Å")

@router.message(Command("makeupdate"))
async def handle_sendall(message: Message, state: FSMContext):
    if message.chat.id == 654148701:
        count = 0
        count_all = 0
        text = "–ê –≤—Å–µ–º –ø–ª–∞–º–µ–Ω–Ω—ã–π –ø—Ä–∏–≤–µ—Ç! ü¶úü¶ú\n\n\
–ó–∞–≤–µ–∑–ª–∏ –æ–±–Ω–æ–≤—É –≤ –±–æ—Ç–∞, –∑–∞—Ö–æ–¥–∏–º –≤ <a href='https://t.me/so1emon'>–∫–∞–Ω–∞–ª</a> —Å–º–æ—Ç—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
        try:
            for row in range(len(localdata.localUsers)):
                
                if await function.send_message_to_users_handler( int( localdata.localUsers[row]["userid"] ) , text, False, message):
                # print(f'user - {localdata.localUsers[row]["userid"]}')
                    count += 1
                count_all += 1
                # 20 messages per second (Limit: 30 messages per second)
                await asyncio.sleep(.05)
        finally:
            logging.info(f"{count} messages successful sent.")
            await message.answer(f"{count} –∏–∑ {count_all} —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


@router.message(Command("regsql"))
async def handle_help(message: types.Message):
    if message.from_user.id == 654148701:
        base.cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT , username varchar(50), userid int, discount int, position int, UNIQUE (username, userid, discount, position))')
        base.conn.commit()
        await message.answer(text = "[BD]: –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.")

@router.message(Command("gettable"))
async def handle_gettable(message: types.Message):
    if message.from_user.id == 654148701:
        base.cursor.execute("SELECT * FROM users;")
        print(base.cursor.fetchall())

@router.message(Command("gettime"))
async def handle_gettime(message: types.Message):
    if message.from_user.id == 654148701:
        current_time = time.time()
        print(current_time)

@router.message(Command("startcontest"))
async def startcontest(message: types.Message):
    if message.from_user.id == 654148701:
        await message.answer(text = "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
        await function.makeContestResults()
        

@router.message(Command("settimediscount")) 
async def handle_gettime(message: types.Message):
    if message.from_user.id == 654148701:
        try:
            user = message.text.split(" ")[1]
            discount = message.text.split(" ")[2]
            base.cursor.execute(f"UPDATE users SET temp_discount = {discount} WHERE username = '{user}'")
            base.conn.commit()
            await message.answer(text = "<b>Done!</b>", parse_mode = "html", reply_markup = markup.adminMenu)
        except Exception as exc:
            print(exc)
            await message.answer(text = f"–û—à–∏–±–∫–∞\n\n<code>{exc}</code>", parse_mode = "html", reply_markup = markup.adminMenu)

@router.message(Command("a"))
async def handle_gettable(message: types.Message):
    if await function.check_admin(message.from_user.id):
        await message.answer(text = "<b>–í—ã —É—Å–ø–µ–ª–Ω—à–æ –∑–∞—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.", parse_mode = "html", reply_markup = markup.adminMenu)

@router.message(Command("–æ—Ç–º–µ–Ω–∞"))
async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id == message.chat.id:
        """
        Allow user to cancel any action
        """
        current_state = await state.get_state()
        if current_state is None:
            if await function.check_admin(message.from_user.id):
                await message.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.adminMenu)
            else:
                await message.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.mainMenu)
            return

        logging.info("Cancelling state %r", current_state)
        await state.clear()
        if await function.check_admin(message.from_user.id):
            await message.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.adminMenu)
        else:
            await message.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup.mainMenu)